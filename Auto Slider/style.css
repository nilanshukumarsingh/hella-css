body {
  margin: 0;
  background-color: #e5e5e5;
}

/* Container for the image with top margin */
.image-container {
  position: relative;
  width: 50%;
  margin: 30px auto 0 auto; /* gap from top and center horizontally */
}

/* Main image styling */
.main-image {
  width: 100%;
  height: auto;
  display: block;
  object-fit: cover;
  border: 3px solid #ccc;
  border-radius: 12px;
  /* box-shadow: 0 8px 20px rgba(0, 0, 0, 0.25); */
  box-shadow: 0 0 15px rgba(0, 255, 255, 0.3); /* teal glow */

}

/* Logo image positioned in top-right corner of image */
.logo-overlay {
  position: absolute;
  top: 10px;
  right: 10px;
  width: 30%;
  height: auto;

  background-color: rgba(255, 255, 255, 0.8); /* brighter backdrop */
  box-shadow: 0 0 25px rgba(0, 255, 255, 0.6); /* brighter teal glow */
  border-radius: 8px;

  padding: 6px;
  backdrop-filter: blur(4px);
}

.slider{
    width: 100%;
    /* border: 1px solid red; */
    height: var(--height);
    overflow: hidden; /*Items that go out of range will be hidden*/
    mask-image: linear-gradient(
        to right,
        transparent,
        #000 10% 90%,
        transparent
    );
}

.slider .list{
    display: flex;
    width: 100%;
    min-width: calc(var(--width)*var(--quantity)); /*Minimum width size must be equal to the width value of each item times the total number of itemes so slider image wont be distorted (we cant use max-content)*/
    position: relative;
}

.slider .list .item{
    width: var(--width);
    height: var(--height);
    position: absolute;
    left: 100%; /*slider we want will move from right to left and it should be outside of the frame*/
    animation: autoRun 10s linear infinite;
    /* 
            time running -> 10s
            quantity -> 10
            time distance  ->  1s (time running / quantity)
            time delay item position => time distance * (positon - 1)
    
            eg for item1 
                (10s / 10) * (1-1) -> 0s
               for item2 
                (10s / 10) * (2-1) -> 1s
            Animation will create an even distance
    */
    animation-delay: calc( (10s / var(--quantity)) * (var(--position) - 1)) !important;
    transition: filter 0.5s;
    
}

.slider .list .item img{
    width: 100%;
    
}

@keyframes autoRun{
    from{
        left: 100%;
    }to{
        left: calc(var(--width) * -1);/*a distance from left equal to the width of item multiplied by - 1 -> -100px*/ 
    }
}

.slider:hover .item{
    animation-play-state: paused !important;
    filter: grayscale(1);
}

.slider .item:hover{
    filter: grayscale(0);
}


/* To make it reverse we will create exception handler */
.slider[reverse="true"] .item{
    animation: reversePlay 10s linear infinite;
}

/* Here is problem we are redeclaring the animation property this will make system delay of all items will be refreshed to 0s to prevent this add !important so it wont get deleted  */
@keyframes reversePlay{
    from{
        left: calc(var(--width) * -1);

    }to{
        left: 100%;
    }
}